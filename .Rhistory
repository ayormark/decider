# if (u > 5 | u < 1 | is.na(u)) {
#   rm(u)
#  warning("Enter 1-5: \n",
# "5 = Extremely Urgent\n",
# "4 = Very Urgent\n",
# "3 = Urgent\n",
# "2 = Somewhat Urgent\n",
# "1 = Not Urgent\n",
# immediate. = T)
#
#   u <- Eisenlikert(task)
# }
u <- u %>% as.numeric %>% round %>% as.integer
# Get Input on task importance
i <- readline(prompt = cat("--->", task, "<---", "\n",
"Enter 1-5: \n",
"5 = Extremely Important\n",
"4 = Very Important\n",
"3 = Important\n",
"2 = Somewhat Important\n",
"1 = Not Important\n",
sep = ""))
# if (i > 5 | i < 1 | is.na(i)) {
#   rm(i)
#   warning("Enter 1-5: \n",
#           "5 = Extremely Important\n",
#           "4 = Very Important\n",
#           "3 = Important\n",
#           "2 = Somewhat Important\n",
#           "1 = Not Important\n",
#           immediate. = T)
#
#   i <- Eisenlikert(task)
# }
i <- i %>% as.numeric %>% round %>% as.integer
# Return Values
return(list(Urgency = u, Importance = i))
}
ratings <- data.frame(matrix(nrow = 0, ncol = 4))
colnames(ratings) <- c("Task", "Urgency", "Importance", "Composite")
todo_tasks <- todo %>%
sample_n(5) %>%
select(Task)
for (task in todo_tasks$Task) {
# task <- todo_tasks$Task[[1]]
rating <- Eisenlikert(task)
rating <- data.frame(Urgency = rating$Urgency,
Importance = rating$Importance)
rating <- rating %>% mutate(Composite = Urgency * Importance)
task <- as.data.frame(task, stringsAsFactors = FALSE) %>% as.tbl()
task_entry <- bind_cols(task, rating) %>% rename(Task = task)
ratings <- bind_rows(ratings, task_entry)
}
Importance_categories <- list("Extremely_Important" = list(),
"Very_Important" = list(),
"Important" = list(),
"Somewhat_Important" = list(),
"Not_Important" = list())
Bucket <- list(
"Extremely_Urgent" = Importance_categories,
"Very_Urgent" = Importance_categories,
"Urgent" = Importance_categories,
"Somewhat_Urgent" = Importance_categories,
"Not_Urgent" = Importance_categories)
for (U in 1:5) {
bucket_entry <- ratings %>% filter(Urgency == U)
for (I in 1:5) {
Bucket[[U]][I] <- bucket_entry %>% filter(Importance == I)
}
}
rm(bucket_entry)
View(cat("--->", task, "<---")
)
View(Buckets)
View(Bucket)
ratings
ratings <- bind_rows(ratings, task_entry) %>% as.tbl()
ratings
ratings %>% arrange(by = Composite)
?arrange
ratings %>% arrange(Composite)
ratings %>% arrange("Composite")
mtcars
mtcars %>% arrange(mpg)
mtcars %>% arrange(by = mpg)
mtcars %>% arrange(by == mpg)
mtcars %>% arrange(by = mpg)
######### Packages ############################################################
library(tidyverse)
library(rje)
library(stringr)
todo <- read_csv("/Users/adamyormark/Downloads/asana2go_output_csv_basic.csv")
Eisenlikert <- function(task) {
# Get Input on task urgency
u <- readline(prompt = cat("---> ", task, " <---", "\n",
"5 = Extremely Urgent\n",
"4 = Very Urgent\n",
"3 = Urgent\n",
"2 = Somewhat Urgent\n",
"1 = Not Urgent\n",
sep = ""))
# if (u > 5 | u < 1 | is.na(u)) {
#   rm(u)
#  warning("Enter 1-5: \n",
# "5 = Extremely Urgent\n",
# "4 = Very Urgent\n",
# "3 = Urgent\n",
# "2 = Somewhat Urgent\n",
# "1 = Not Urgent\n",
# immediate. = T)
#
#   u <- Eisenlikert(task)
# }
u <- u %>% as.numeric %>% round %>% as.integer
# Get Input on task importance
i <- readline(prompt = cat("---> ", task, " <---", "\n",
"Enter 1-5: \n",
"5 = Extremely Important\n",
"4 = Very Important\n",
"3 = Important\n",
"2 = Somewhat Important\n",
"1 = Not Important\n",
sep = ""))
# if (i > 5 | i < 1 | is.na(i)) {
#   rm(i)
#   warning("Enter 1-5: \n",
#           "5 = Extremely Important\n",
#           "4 = Very Important\n",
#           "3 = Important\n",
#           "2 = Somewhat Important\n",
#           "1 = Not Important\n",
#           immediate. = T)
#
#   i <- Eisenlikert(task)
# }
i <- i %>% as.numeric %>% round %>% as.integer
# Return Values
return(list(Urgency = u, Importance = i))
}
ratings <- data.frame(matrix(nrow = 0, ncol = 4))
colnames(ratings) <- c("Task", "Urgency", "Importance", "Composite")
todo_tasks <- todo %>%
sample_n(5) %>%
select(Task)
for (task in todo_tasks$Task) {
# task <- todo_tasks$Task[[1]]
rating <- Eisenlikert(task)
rating <- data.frame(Urgency = rating$Urgency,
Importance = rating$Importance)
rating <- rating %>% mutate(Composite = Urgency * Importance)
task <- as.data.frame(task, stringsAsFactors = FALSE) %>% as.tbl()
task_entry <- bind_cols(task, rating) %>% rename(Task = task)
ratings <- bind_rows(ratings, task_entry) %>% as.tbl()
}
ratings %>% arrange(Composite)
ratings <- ratings %>% arrange(Composite)
ratings
ratings <- ratings %>% arrange(-Composite)
ratings
full_join(ratings, todo, by = Task)
full_join(ratings, todo, by = "Task")
todo <- full_join(ratings, todo, by = "Task")
todo
todo <- read_csv("/Users/adamyormark/Downloads/asana2go_output_csv_basic\*.csv")
todo <- read_csv("/Users/adamyormark/Downloads/asana2go_output_csv_basic (1).csv")
Eisenlikert <- function(task) {
# Get Input on task urgency
u <- readline(prompt = cat("---> ", task, " <---", "\n",
"5 = Extremely Urgent\n",
"4 = Very Urgent\n",
"3 = Urgent\n",
"2 = Somewhat Urgent\n",
"1 = Not Urgent\n",
sep = ""))
# if (u > 5 | u < 1 | is.na(u)) {
#   rm(u)
#  warning("Enter 1-5: \n",
# "5 = Extremely Urgent\n",
# "4 = Very Urgent\n",
# "3 = Urgent\n",
# "2 = Somewhat Urgent\n",
# "1 = Not Urgent\n",
# immediate. = T)
#
#   u <- Eisenlikert(task)
# }
u <- u %>% as.numeric %>% round %>% as.integer
# Get Input on task importance
i <- readline(prompt = cat("---> ", task, " <---", "\n",
"Enter 1-5: \n",
"5 = Extremely Important\n",
"4 = Very Important\n",
"3 = Important\n",
"2 = Somewhat Important\n",
"1 = Not Important\n",
sep = ""))
# if (i > 5 | i < 1 | is.na(i)) {
#   rm(i)
#   warning("Enter 1-5: \n",
#           "5 = Extremely Important\n",
#           "4 = Very Important\n",
#           "3 = Important\n",
#           "2 = Somewhat Important\n",
#           "1 = Not Important\n",
#           immediate. = T)
#
#   i <- Eisenlikert(task)
# }
i <- i %>% as.numeric %>% round %>% as.integer
# Return Values
return(list(Urgency = u, Importance = i))
}
ratings <- data.frame(matrix(nrow = 0, ncol = 4))
colnames(ratings) <- c("Task", "Urgency", "Importance", "Composite")
todo_tasks <- todo %>%
# sample_n(5) %>%
select(Task)
for (task in todo_tasks$Task) {
# task <- todo_tasks$Task[[1]]
rating <- Eisenlikert(task)
rating <- data.frame(Urgency = rating$Urgency,
Importance = rating$Importance)
rating <- rating %>% mutate(Composite = Urgency * Importance)
task <- as.data.frame(task, stringsAsFactors = FALSE) %>% as.tbl()
task_entry <- bind_cols(task, rating) %>% rename(Task = task)
ratings <- bind_rows(ratings, task_entry) %>% as.tbl()
}
ratings <- ratings %>% arrange(-Composite)
todo <- full_join(ratings, todo, by = "Task")
todo
todo %>% select(Task, Urgency, Importance, Composite)
todo %>% select(Task, Urgency, Importance, Composite) %>% View()
# Scrape tasks from My Tasks page of Asana
url <- "https://app.asana.com/0/932414416064709/list"
# Read html from the url of the project
html <- read_html(url)
# Select only the relevant text from the page
html_description <- html_nodes(html, ".override-focus-border")
library(rvest)
# Scrape tasks from My Tasks page of Asana
url <- "https://app.asana.com/0/932414416064709/list"
# Read html from the url of the project
html <- read_html(url)
install.packages("asana")
# install.packages("remotes")
remotes::install_github("datacamp/asana")
remotes::install_github("datacamp/asana")
??remotes
install_github("datacamp/asana")
install.packages("devtools")
library(devtools)
install_github("datacamp/asana")
?asana
# Scrape tasks from My Tasks page of Asana
url <- "https://app.asana.com/api/1.0/users/me"
# Read html from the url of the project
html <- read_html(url)
# Scrape tasks from My Tasks page of Asana
url <- "https://app.asana.com/api/1.0"
# Read html from the url of the project
html <- read_html(url)
# Read html from the url of the project
html <- read_json(url)
library(jsonlite)
?jsonlite
# Read html from the url of the project
JSON <- fromJSON(url)
library(Rcurl)
library(RCurl)
install.packages("RCurl")
library(RCurl)
my_tasks_project_gid <- "932414416064709"
Eisenlikert("do this thing")
######### Packages ############################################################
library(tidyverse)
library(rje)
library(stringr)
library(jsonlite)
library(RCurl)
# Access the Asana API
url <- "https://app.asana.com/api/1.0/user_task_list/{user_task_list_gid}"
AccessToken <- "0/7ba466e406ed1801ff61cdd1979a730e"
todo <- read_csv("/Users/adamyormark/Downloads/asana2go_output_csv_basic (1).csv")
# Access the Asana API
url <- "https://app.asana.com/api/1.0/user_task_list/{user_task_list_gid}"
AccessToken <- "0/7ba466e406ed1801ff61cdd1979a730e"
my_tasks_project_gid <- "932414416064709"
# Read JSON from the API rquest
JSON <- fromJSON(url)
# This function asks the user to rank the Urgency and Importance from 1-5
# Output is a list with two elements, Urgency and Importance, as integers
Eisenlikert <- function(task) {
# Get Input on task urgency
u <- readline(prompt = cat("---> ", task, " <---", "\n",
"5 = Extremely Urgent\n",
"4 = Very Urgent\n",
"3 = Urgent\n",
"2 = Somewhat Urgent\n",
"1 = Not Urgent\n",
sep = ""))
# if (u > 5 | u < 1 | is.na(u)) {
#   rm(u)
#  warning("Enter 1-5: \n",
# "5 = Extremely Urgent\n",
# "4 = Very Urgent\n",
# "3 = Urgent\n",
# "2 = Somewhat Urgent\n",
# "1 = Not Urgent\n",
# immediate. = T)
#
#   u <- Eisenlikert(task)
# }
# Convert entry from string to integer
u <- u %>% as.numeric %>% round %>% as.integer
# Get Input on task importance
i <- readline(prompt = cat("---> ", task, " <---", "\n",
"Enter 1-5: \n",
"5 = Extremely Important\n",
"4 = Very Important\n",
"3 = Important\n",
"2 = Somewhat Important\n",
"1 = Not Important\n",
sep = ""))
# if (i > 5 | i < 1 | is.na(i)) {
#   rm(i)
#   warning("Enter 1-5: \n",
#           "5 = Extremely Important\n",
#           "4 = Very Important\n",
#           "3 = Important\n",
#           "2 = Somewhat Important\n",
#           "1 = Not Important\n",
#           immediate. = T)
#
#   i <- Eisenlikert(task)
# }
# Convert entry from string to integer
i <- i %>% as.numeric %>% round %>% as.integer
# Return Value List
return(list(Urgency = u, Importance = i))
}
# Create empty dataframe with 4 columns
ratings <- data.frame(matrix(nrow = 0, ncol = 4))
# Name the columns
colnames(ratings) <- c("Task", "Urgency", "Importance", "Composite")
# Select Task column from imported to do list
todo_tasks <- todo %>%
# sample_n(5) %>%
select(Task)
# Run the Eisenlikert function on each task and add ratings to the dataframe
for (task in todo_tasks$Task) {
# test with fewer tasks
# task <- todo_tasks$Task[[1]]
# Ask for ratings and store input
rating <- Eisenlikert(task)
# Convert from list to dataframe
rating <- data.frame(Urgency = rating$Urgency,
Importance = rating$Importance)
# Add rating to Composite column for generalized importance of completion
rating <- rating %>% mutate(Composite = Urgency * Importance)
# Convert task string to dataframe
task <- as.data.frame(task, stringsAsFactors = FALSE) %>% as.tbl()
# Combine into one dataframe
task_entry <- bind_cols(task, rating) %>% rename(Task = task)
# Combine input from this loop into full rating list
ratings <- bind_rows(ratings, task_entry) %>% as.tbl()
}
2
3
4
2
# Merge ratings back into original list
todo <- full_join(ratings, todo, by = "Task")
# Order to do tasks by Composite Value
todo <- todo %>% select(Task, Urgency, Importance, Composite) %>%
arrange(-Composite)
View(todo)
mtcars %>% typeof
library(help = "datasets")
mtcars %>% top_n(10)
x <- mtcars %>% top_n(3)
mtcars %>% top_n(3)
x <- mtcars %>% sample_n(3)
x
x <- mtcars %>% sample_n(6)
x
mtcars
#'
#' set.seed(1)
#' quickSort(powerSet(1:3), f=subsetOrder)
#' quickSort(powerSet(1:3), f=subsetOrder)
#' # slightly different answers, but both correposnding
#' # to a legitimate total ordering.
#'
#'
#'
######### Packages ############################################################
library(dplyr)
as_data_frame(mtcars, rownames = "Make_Model"
)
as.tibble(mtcars, rownames = "Make_Model")
as_tibble(mtcars, rownames = "Make_Model")
as_tibble(mtcars, rownames = "Make/Model")
x <- as_tibble(mtcars, rownames = "Make/Model") %>% sample_n(6)
x
x <- as_tibble(mtcars, rownames = "Make&Model") %>% sample_n(6)
x
x <- as_tibble(mtcars, rownames = "Make/Model") %>% sample_n(6)
x
#' Implements the quicksort algorithm for partial orderings based on pairwise
#' comparisons.
#'
#' Implements the usual quicksort algorithm, but may return the same positions
#' for items which are incomparable (or equal).  Does not test the validity of
#' \code{f} as a partial order.
#'
#' If \code{x} is a numeric vector with distinct entries, this behaves just
#' like \code{\link[base]{order}}.
#'
#' @param x A list or vector of items to be sorted.
#' @param f A function on two arguments for comparing elements of \code{x}.
#' Returns \code{-1} if the first argument is less than the second, \code{1}
#' for the reverse, and \code{0} if they are equal or incomparable.
#' @param random logical - should a random pivot be chosen? (this is
#' recommended) Otherwise middle element is used.
#' @return Returns an integer vector giving each element's position in the
#' order (minimal element(s) is 1, etc).
#' @section Warning: Output may not be consistent for certain partial orderings
#' (using random pivot), see example below.  All results will be consistent
#' with a total ordering which is itselft consistent with the true partial
#' ordering.
#'
#' \code{f} is not checked to see that it returns a legitimate partial order,
#' so results may be meaningless if it is not.
#' @author Robin Evans
#' @seealso \code{\link[base]{order}}.
#' @references \url{http://en.wikipedia.org/wiki/Quicksort}.
#' @keywords arith optimize
#' @examples
#'
#' set.seed(1)
#' quickSort(powerSet(1:3), f=subsetOrder)
#' quickSort(powerSet(1:3), f=subsetOrder)
#' # slightly different answers, but both correposnding
#' # to a legitimate total ordering.
#'
#'
#'
######### Packages ############################################################
library(dplyr)
######### Function #########################################################
#' @export quickSort
quickSort <-
function (x, f = greaterThan, random = TRUE)
{
lst = is.list(x)
n = length(x)
if (n < 2)
return(seq_len(n))
if (n == 2) {
if (lst)
com = f(x[[1]], x[[2]])
else com = f(x[1], x[2])
if (com == 0)
return(c(1, 1))
else if (com == 1)
return(c(2, 1))
else if (com == -1)
return(c(1, 2))
else stop()
}
if (random)
mid = sample(n, 1)
else mid = ceiling(n/2)
comp = numeric(n)
comp[mid] = 2
for (i in seq_len(n)[-mid]) {
if (lst)
comp[i] = f(x[[i]], x[[mid]])
else comp[i] = f(x[i], x[mid])
}
lu = Recall(x[comp == 1], f, random)
ld = Recall(x[comp == -1], f, random)
lm = Recall(x[comp == 0], f, random)
rank = numeric(n)
rank[comp == -1] = ld
rank[mid] = max(c(0, ld)) + 1
rank[comp == 0] = lm + max(c(0, ld))
rank[comp == 1] = lu + max(c(0, rank), na.rm = TRUE)
return(rank)
}
?greaterThan
is.list
?is.list
length(x)
?length
?com
?greaterThan
menu("a", "b")
menu(["a", "b"])
menu(c("a", "b"))
x <- "Clean Room"
y <- "Do Dishes"
compare(x, y)
menu(x, y)
x <- c("Clean Room", "Do Dishes")
# menu(choices, graphics = FALSE, title = NULL)
menu(x, graphics = TRUE, title = "hi")
source("/Users/adamyormark/Google Drive/Personal/R/decider/To Do Prioritization Optimization Tool.R")
source("/Users/adamyormark/Google Drive/Personal/R/decider/To Do Prioritization Optimization Tool.R")
source("/Users/adamyormark/Google Drive/Personal/R/decider/To Do Prioritization Optimization Tool.R")
rm(list=ls())
source("/Users/adamyormark/Google Drive/Personal/R/decider/To Do Prioritization Optimization Tool.R")
