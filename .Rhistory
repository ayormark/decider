if (urgency_bias > 4) {
warning("Urgency Biases above 4 do not alter results")
}
u <- seq.int(bin_u_min, bin_u_max)
i <- seq.int(bin_i_min, bin_i_max)
# All combinations of u and i
ui_combinations <- expand_grid(u, i)
# Calculate starting and ending i intercept values, b
b_start <- bin_i_max - (slope)*bin_u_max
b_end <- bin_i_min - (slope)*bin_u_min
# Move b down by the minimal step distance after each task
b_step <- (b_end - b_start)/(nrow(ui_combinations))
ui_rankings <- matrix(ncol = 3, nrow = 0)
colnames(ui_rankings) <- c("u", "i", "distance_rank")
ui_rankings <- as_tibble(ui_rankings)
for (ui_combo in 1:nrow(ui_combinations)) {
ui_point <- ui_combinations[ui_combo,]
# Distance formula for a point to a line
dist <- abs(b_start + (slope * ui_point[1]) - ui_point[2]) / sqrt(1 + slope^2)
dist <- dist %>% as_tibble %>% rename(distance_rank = u)
ui_ranked <- bind_cols(ui_point, dist)
# dist <- dist2Line(ui_point, line)
ui_rankings <- bind_rows(ui_rankings, ui_ranked)
# dist <- sqrt(dist[[2]]^2 + dist[[3]]^2)
}
ui_rankings <- ui_rankings %>% arrange(by = distance_rank)
return(ui_rankings)
}
get_ui_rankings()
a <- get_ui_rankings()
a
a %>% View
get_ui_rankings <- function (urgency_bias = 1.4,
bin_u_max = 5,
bin_i_max = 5,
bin_u_min = 1,
bin_i_min = 1) {
# Urgency bias above 1 favors urgency, below favors importance
slope <- -urgency_bias
# Mathematical constraints on urgency bias
if (urgency_bias == 1) {
stop("Indeterminate. Urgency Bias can't be 1")
}
if (urgency_bias < 0) {
stop("Urgency Bias can't be below 0")
}
if (urgency_bias > 4) {
warning("Urgency Biases above 4 do not alter results")
}
u <- seq.int(bin_u_min, bin_u_max)
i <- seq.int(bin_i_min, bin_i_max)
# All combinations of u and i
ui_combinations <- expand_grid(u, i)
# Calculate starting and ending i intercept values, b
b_start <- bin_i_max - (slope)*bin_u_max
b_end <- bin_i_min - (slope)*bin_u_min
# Move b down by the minimal step distance after each task
b_step <- (b_end - b_start)/(nrow(ui_combinations))
ui_rankings <- matrix(ncol = 3, nrow = 0)
colnames(ui_rankings) <- c("u", "i", "distance_rank")
ui_rankings <- as_tibble(ui_rankings)
for (ui_combo in 1:nrow(ui_combinations)) {
ui_point <- ui_combinations[ui_combo,]
# Distance formula for a point to a line
dist <- abs(b_start + (slope * ui_point[1]) - ui_point[2]) / sqrt(1 + slope^2)
dist <- dist %>% as_tibble %>% rename(distance_rank = u)
ui_ranked <- bind_cols(ui_point, dist)
# dist <- dist2Line(ui_point, line)
ui_rankings <- bind_rows(ui_rankings, ui_ranked)
# dist <- sqrt(dist[[2]]^2 + dist[[3]]^2)
}
ui_rankings <- ui_rankings %>% arrange(by = distance_rank)
return(ui_rankings)
}
get_ui_rankings()
devtools::document()
?get_ui_rankings
devtools::document()
?get_ui_rankings
devtools::document()
?get_ui_rankings
devtools::document()
?get_ui_rankings
devtools::document()
?get_ui_rankings
opendir()
asana::asn_get("/projects/932414416064709/tasks", completed_since="now")
asana::asn_get("/projects/932414416064709/tasks", completed_since="now")
?decider
decider()
asana::asn_get("/projects/932414416064709/tasks", completed_since="now")
asana::asn_get("/projects/1148823248153567/tasks", completed_since="now")
?asana
library(asana)
# asn_sections_create_in_project(project = "1148823248153567")
?asn_sections_create_in_project
asn_sections_create_in_project(project = "1148823248153567", "The New Section)
asn_sections_create_in_project(project = "1148823248153567", "The New Section")
asn_sections_create_in_project(project = "1148823248153567", section = "The New Section")
asn_sections_create_in_project(project = "1148823248153567", names = "The New Section")
asn_sections_create_in_project(project = "1148823248153567", name = "The New Section")
asn_sections_create_in_project(project = "1148823248153567", name = list("The New Section", "Other Section", "Real Importunt stoof"))
asn_sections_create_in_project(project = "1148823248153567", name = c("The New Section", "Other Section", "Real Importunt stoof"))
asn_sections_create_in_project(project = "1148823248153567", name = "Importunt stoof")
do_order <- list(
"EUEI" = list("EUEI", "Delegate if Possible"),
"EUVI" = list("EUVI", "Delegate if Possible"),
"VUEI" = list("VUEI", "Delegate if Possible"),
"EUMI" = list("EUMI", "Delegate if Possible"),
"VUVI" = list("VUVI", "Delegate if Possible"),
"EUSI" = list("EUSI", "Delegate if Possible"),
"MUEI" = list("MUEI", "Delegate if Possible"),
"VUMI" = list("VUMI", "Delegate if Possible"),
"SUEI" = list("SUEI", "Schedule"),
"EUNI" = list("EUNI", "Delegate if Possible"),
"MUVI" = list("MUVI", "Delegate if Possible"),
"VUSI" = list("VUSI", "Delegate if Possible"),
"SUVI" = list("SUVI", "Schedule"),
"SUEI" = list("SUEI", "Delegate if Possible"), # again, after scheduling
"MUMI" = list("MUMI", "Delegate if Possible"),
"NUEI" = list("NUEI", "Schedule"),
"VUNI" = list("VUNI", "Delegate if Possible"),
"SUMI" = list("SUMI", "Schedule"),
"SUVI" = list("SUVI", "Delegate if Possible"), # again, after scheduling
"MUSI" = list("MUSI", "Delegate if Possible"),
"NUVI" = list("NUVI", "Schedule"),
"NEUI" = list("NUEI", "Delegate if Possible"), # again, after scheduling
"SUMI" = list("SUMI", "Delegate if Possible"), # again, after scheduling
"MUNI" = list("MUNI", "Delegate if Possible"),
"NUMI" = list("NUMI", "Schedule"),
"NUVI" = list("NUVI", "Delegate if Possible"), # again, after scheduling
"SUSI" = list("SUSI", "Delegate, Schedule, or Delete"),
"NUMI" = list("NUMI", "Delegate if Possible"), # again, after scheduling
"SUNI" = list("SUNI", "Delegate, Schedule, or Delete"),
"NUSI" = list("NUSI", "Delegate, Schedule, or Delete"),
"NUNI" = list("NUNI", "Delegate, Schedule, or Delete"))
do_order %>% names()
do_order %>% names() %>% unique()
project_gid <- "1148823248153567"
sections <- list("Do", "Delegate", "Schedule")
project_gid <- "1148823248153567"
sections <- list("Do", "Delegate", "Schedule")
for (section in sections) {
asn_sections_create_in_project(project = project_gid, name = section)
}
for (section in sections) {
asn_sections_create_in_project(project = project_gid, name = section)
}
asn_sections_find_by_project(project = project_gid)
current sections <- asn_sections_find_by_project(project = project_gid) %>% .name
asn_sections_find_by_project(project = project_gid) %>% .name
current sections <- asn_sections_find_by_project(project = project_gid)
asn_sections_find_by_project(project = project_gid)
current_sections <- asn_sections_find_by_project(project = project_gid) %>% .name
current_sections <- asn_sections_find_by_project(project = project_gid) %>% .$name
current_sections
current_sections <- current_sections %>% filter(by != "(no section)")
current_sections
asn_sections_find_by_project(project = project_gid)
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
current_sections
current_sections <-
asn_sections_find_by_project(project = project_gid)
current_sections
current_sections %>% filter(name != "(no section)")
current_sections %>% filter(name = !"(no section)")
current_sections %>% filter(name = "(no section)")
current_sections %>% filter(name != "no section")
?filter
current_sections %>% filter(name == "Do")
library(dplyr)
current_sections %>% filter(name == "Do")
current_sections %>% filter(name != "(no section)")
current_sections %>% filter(name != "(no section)")
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
current_sections %>% filter(name != "(no section)")
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
current_sections
?decider
######### Info ################################################################
# Adam Yormark
# build_sections function for Decider
######### Documentation #######################################################
#' Gets tasks from a project in Asana
#' @param sections A list of new section titles to be added to the
#' project, in order. If a section already exists it will not create duplicates
#' @param project_gid The gid identifier for a specific project in Asana,
#' @export
#' @examples
#' asana_import(
#' ASANA_ACCESS_TOKEN = "add_your_34_chr_asana_access_token",
#' project_gid = "123456789101112")
######### Function ########################################################
# library(asana)
# library(dplyr)
build_sections <-
function(sections, project_gid = Sys.getenv("ASANA_MYTASKS_PROJECT_ID")) {
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
for (section in sections) {
asn_sections_create_in_project(project = project_gid, name = section)
}
}
project_gid <- "1148823248153567"
sections <- list("Do", "Delegate", "Schedule", "Ya Ya")
build_sections(sections, project_gid)
project_gid
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
current_sections
current_sections
current_sections
sections <- list("Do", "Delegate", "Schedule", "Ya Ya")
project_gid <- "1148823248153567"
asn_sections_create_in_project(project = project_gid, name = section)
build_sections <-
build_sections <-
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
sections <- sections %>% filter(name
for (section in sections) {
asn_sections_create_in_project(project = project_gid, name = section)
}
}
project_gid <- "1148823248153567"
sections <- list("Do", "Delegate", "Schedule", "Ya Ya")
build_sections(sections, project_gid)
build_sections <-
function(sections, project_gid = Sys.getenv("ASANA_MYTASKS_PROJECT_ID")) {
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
sections <- sections %>% filter(name
for (section in sections) {
asn_sections_create_in_project(project = project_gid, name = section)
}
}
project_gid <- "1148823248153567"
sections <- list("Do", "Delegate", "Schedule", "Ya Ya")
build_sections(sections, project_gid)
build_sections <- function(sections, project_gid = Sys.getenv("ASANA_MYTASKS_PROJECT_ID")) {
build_sections <- function(sections, project_gid = Sys.getenv("ASANA_MYTASKS_PROJECT_ID")) {
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
# sections <- sections %>% filter(name
for (section in sections) {
asn_sections_create_in_project(project = project_gid, name = section)
}
}
project_gid <- "1148823248153567"
sections <- list("Do", "Delegate", "Schedule", "Ya Ya")
build_sections(sections, project_gid)
build_sections <- function(sections, project_gid = Sys.getenv("ASANA_MYTASKS_PROJECT_ID")) {
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
# sections <- sections %>% filter(name
for (section in sections) {
asn_sections_create_in_project(project = project_gid, name = section)
}
}
build_sections <- function(sections, project_gid = Sys.getenv("ASANA_MYTASKS_PROJECT_ID")) {
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
# sections <- sections %>% filter(name
for (section in sections) {
asn_sections_create_in_project(project = project_gid, name = section)
}
}
project_gid <- "1148823248153567"
sections <- list("Do", "Delegate", "Schedule", "Ya Ya")
build_sections(sections, project_gid)
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
current_sections
sections <- list("Do", "Delegate", "Schedule", "Ya Ya", "okayokay")
current_sections
sections
sections$name
sections
sections %>% as_tibble
sections %>% as.vector()
sections[[]]
sections[,]
sections
sections %>% Vectorize()
sections[1]
sections[1][1]
sections[[1]][1]
sections[[,]][1]
sections[[]][1]
sections
length(sections)
sections %>% names("hi")
sections %>% names()
sections %>% rename()
names(section) <- names(c(1, 2, 3, 4, 5))
section
section
sections <- c("Do", "Delegate", "Schedule", "Ya Ya", "okayokay")
sections %>% as_tibble
sections %>% enframe(name = NULL)
library(tidyverse)
sections %>% enframe(name = NULL)
current_sections
sections %>% enframe(name = NULL) %>% rename(name = value)
sections <- c("Do", "Delegate", "Schedule", "Ya Ya", "okayokay", "Woodledoodleoodle")
sections <- sections %>% enframe(name = NULL) %>% rename(name = value)
antijoin(current_sections, sections)
anti_join(current_sections, sections)
left_join(sections, current_sections)
right_join(sections, current_sections)
inner_join(sections, current_sections)
outer_join(sections, current_sections)
full_join(sections, current_sections)
anti_join(sections, current_sections, by = name)
?anti_join
right_join(sections, current_sections)
current_sections
sections
semi_join(sections, current_sections)
nest_join(sections, current_sections)
full_join(sections, current_sections)
n
full_join(sections, current_sections) %>% filter(gid == NA)
full_join(sections, current_sections)
full_join(sections, current_sections) %>% filter(is.na(gid))
######### Info ################################################################
# Adam Yormark
# build_sections function for Decider
######### Documentation #######################################################
#' Gets tasks from a project in Asana
#' @param sections A vector of new section titles to be added to the
#' project, in order. If a section already exists it will not create duplicates
#' @param project_gid The gid identifier for a specific project in Asana,
#' @export
#' @examples
#' asana_import(
#' ASANA_ACCESS_TOKEN = "add_your_34_chr_asana_access_token",
#' project_gid = "123456789101112")
######### Function ########################################################
# library(asana)
# library(tidyverse)
# library(dplyr)
build_sections <-
function(sections, project_gid = Sys.getenv("ASANA_MYTASKS_PROJECT_ID")) {
# Get list of sections that currently exist in the project
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
# Convert input sections into a tibble for easier manipulation
sections <- sections %>% enframe(name = NULL) %>% rename(name = value)
# Filter out section names that already exist in the project
new_sections <- full_join(sections, current_sections) %>% filter(is.na(gid))
# Create the sections in the project
for (section in new_sections) {
asn_sections_create_in_project(project = project_gid, name = section)
}
}
project_gid <- "1148823248153567"
sections <- c("Do", "Delegate", "Schedule", "Ya Ya", "okayokay", "Woodledoodleoodle")
build_sections(sections, project_gid)
sections <- c("Do", "Delegate", "Schedule", "Ya Ya", "okayokay", "Woodledoodleoodle")
project_gid <- "1148823248153567"
s
# Get list of sections that currently exist in the project
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
current_sections
# Convert input sections into a tibble for easier manipulation
sections <- sections %>% enframe(name = NULL) %>% rename(name = value)
sections
# Filter out section names that already exist in the project
new_sections <- full_join(sections, current_sections) %>% filter(is.na(gid))
new_sections
new_sections$name
# Create the sections in the project
for (section in new_sections$name) {
asn_sections_create_in_project(project = project_gid, name = section)
}
sections <- c("Do", "Delegate", "Schedule")
######### Info ################################################################
# Adam Yormark
# build_sections function for Decider
######### Documentation #######################################################
#' Gets tasks from a project in Asana
#' @param sections A vector of new section titles to be added to the
#' project, in order. If a section already exists it will not create duplicates
#' @param project_gid The gid identifier for a specific project in Asana,
#' @export
#' @examples
#' asana_import(
#' ASANA_ACCESS_TOKEN = "add_your_34_chr_asana_access_token",
#' project_gid = "123456789101112")
######### Function ########################################################
# library(asana)
# library(tidyverse)
# library(dplyr)
build_sections <-
function(sections, project_gid = Sys.getenv("ASANA_MYTASKS_PROJECT_ID")) {
# Get list of sections that currently exist in the project
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
# Convert input sections into a tibble for easier manipulation
sections <- sections %>% enframe(name = NULL) %>% rename(name = value)
# Filter out section names that already exist in the project
new_sections <- full_join(sections, current_sections) %>% filter(is.na(gid))
# Create the sections in the project
for (section in new_sections$name) {
asn_sections_create_in_project(project = project_gid, name = section)
}
}
project_gid <- "1148823248153567"
sections <- c("Do", "Delegate", "Schedule")
# sections <- c("Do", "Delegate", "Schedule", "Ya Ya", "okayokay", "Woodledoodleoodle")
build_sections(sections, project_gid)
######### Info ################################################################
# Adam Yormark
# build_sections function for Decider
######### Documentation #######################################################
#' Gets tasks from a project in Asana
#' @param sections A vector of new section titles to be added to the
#' project, in order. If a section already exists it will not create duplicates
#' @param project_gid The gid identifier for a specific project in Asana,
#' @export
#' @examples
#' asana_import(
#' ASANA_ACCESS_TOKEN = "add_your_34_chr_asana_access_token",
#' project_gid = "123456789101112")
######### Function ########################################################
# library(asana)
# library(tidyverse)
# library(dplyr)
build_sections <-
function(sections, project_gid = Sys.getenv("ASANA_MYTASKS_PROJECT_ID")) {
# Get list of sections that currently exist in the project
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
# Convert input sections into a tibble for easier manipulation
sections <- sections %>% enframe(name = NULL) %>% rename(name = value)
# Filter out section names that already exist in the project
new_sections <- full_join(sections, current_sections) %>% filter(is.na(gid))
# Create the sections in the project
for (section in new_sections$name) {
asn_sections_create_in_project(project = project_gid, name = section)
}
}
project_gid <- "1148823248153567"
# sections <- c("Do", "Delegate", "Schedule")
sections <- c("Do", "Delegate", "Schedule", "Ya Ya", "okayokay", "Woodledoodleoodle")
build_sections(sections, project_gid)
devtools::document()
?build_sections
devtools::document()
?build_sections
devtools::document()
?build_sections
devtools::document()
?build_sections
if (section !%in% current_sections) {print("hi")}
if (section %in% current_sections) {print("hi")}
if (section %!in% current_sections) {print("hi")}
if (!(section %in% current_sections)) {print("hi")}
section
current_sections
# Get list of sections that currently exist in the project
current_sections <-
asn_sections_find_by_project(project = project_gid) %>%
filter(name != "(no section)")
if (!(section %in% current_sections)) {print("hi")}
section
current_sections
if (!(section %in% current_sections$name)) {print("hi")}
if (!(section %in% current_sections$name)) {
stop(paste0(section,
" is not a section within the project.
Consider creating this section first."))}
if (!(section %in% current_sections$name)) {
stop(paste0(section,
" is not a section within the project.",
"Consider creating this section first."))}
if (!(section %in% current_sections$name)) {
stop(paste0(section,
" is not a section within the project. ",
"Consider creating this section first."))}
if (!(section %in% current_sections$name)) {
stop(paste0(section,
" is not a section within this project. ",
"Consider creating this section first."))}
section
# Convert input sections into a tibble for easier manipulation
section <- section %>% enframe(name = NULL) %>% rename(name = value)
section
sections
todo
todo %>% head(1)
task <- todo %>% head(1)
todo
todo %>% View
